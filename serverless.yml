# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: forex-price-chart
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  timeout: 300
  deploymentBucket:
    name: forex-price-chart-lambda-s3
# you can overwrite defaults here
  stage: dev
  region: ap-northeast-1
  environment:
    TZ: Asia/Tokyo

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  patterns:
    - handler.py
    - tmp/**
    - notifiers/**
  exclude:
    - '**'

#  individually: true
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**
#layers:
#  path: layers
#  name: ${self:service}-layers
#  compatibleRuntimes:
#    - python 3.8
#  allowedAccounts:
#    - '*'

functions:
  lambdahandler:
    handler: handler.lambdahandler
#    layers:
#      - {Ref: Layer}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
    - schedule: cron(0 21 ? * MON-FRI *)
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin

# 毎回のビルド時間短縮
custom:
  pythonRequirements:
    #dockerfile: Dockerfile
    # dockerExtraFiles:
    #   - /usr/lib64/xxxxxxx
    dockerizePip: true #non-linux # numpyとかinstallしたいなら必須。
    slim: true # __pycache__とかいらないものを消してくれる。
    zip: true  # scipyとか大きいモジュールをzip化してくれる。
    useDownloadCache: true # デプロイ時、pipライブラリをキャッシュして使う。
    useStaticCache: true
    layer:
      dockerlizePip: true
      name: ${self:provider.stage}-requirementLayer
      description: Python requirements lambda layer
      compatibleRuntimes:
        - python3.8

useDotenv: true
